N
1) Implemente, em Java, uma classe abstrata de nome Quadrilatero onde s√£o
declarados dois m√©todos abstratos:
float calcularArea();
  float calcularPerimetro();

2) Crie, como subclasse de Quadrilatero, uma classe de nome Retangulo cujas inst√¢ncias
s√£o caracterizadas pelos atributos lado e altura ambos do tipo float. Implemente na
classe Retangulo os m√©todos herdados de Quadrilatero e outros que ache necess√°rios.
Classe ret√¢ngulo

3 - Crie, como subclasse de Quadrilatero, uma classe de nome Circulo cujas inst√¢ncias
s√£o caracterizadas pelo atributo raio do tipo float. Implemente na classe Circulo os
m√©todos herdados de Quadrilatero e outros que ache necess√°rios.
Nota: poder√° aceder ao valor de Pi fazendo Math.Pi.
classe de nome Circulo

4 - Crie, como subclasse de Retangulo, uma classe de nome Quadrado cujas inst√¢ncias
s√£o caracterizadas por terem os atributos lado e altura com o mesmo valor.
classe de nome Quadrado

5 - Elabore um programa de teste onde √© declarado um array, de dimens√£o 5, do tipo
est√°tico Quadrilatero. Nesse array devem ser guardadas inst√¢ncias de Ret√¢ngulo, Circulo
e Quadrado seguindo uma ordem aleat√≥ria. Nota: para gerar n√∫meros aleat√≥rios crie
primeiro uma inst√¢ncia da classe Random (presente na biblioteca java.util) e para extrair
um inteiro entre 0 e n efetue a evoca√ß√£o nextInt(n). Depois implemente um ciclo que
percorra o array evocando, relativamente a cada um dos objetos guardados, os m√©todos
calcularArea e calcularPerimetro. programa de teste.

1. Classe Abstrata Quadrilate1. Classe Abstrata Quadrilatero
java

Copiar c√≥digo
abstract class Quadrilatero {
    abstract float calcularArea();
    abstract float calcularPerimetro();
}
2. Classe Retangulo
java

Copiar c√≥digo
class Retangulo extends Quadrilatero {
    private float lado;
    private float altura;

    public Retangulo(float lado, float altura) {
        this.lado = lado;
        this.altura = altura;
    }

    @Override
    float calcularArea() {
        return lado * altura;
    }

    @Override
    float calcularPerimetro() {
        return 2 * (lado + altura);
    }

    public float getLado() {
        return lado;
    }

    public float getAltura() {
        return altura;
    }
}
3. Classe Circulo
java

Copiar c√≥digo
class Circulo extends Quadrilatero {
    private float raio;

    public Circulo(float raio) {
        this.raio = raio;
    }

    @Override
    float calcularArea() {
        return (float) (Math.PI * Math.pow(raio, 2));
    }

    @Override
    float calcularPerimetro() {
        return (float) (2 * Math.PI * raio);
    }

    public float getRaio() {
        return raio;
    }
}
4. Classe Quadrado
java

Copiar c√≥digo
class Quadrado extends Retangulo {
    public Quadrado(float lado) {
        super(lado, lado);
    }
}
5. Programa de Teste
java

Copiar c√≥digo
import java.util.Random;

public class TesteQuadrilatero {
    public static void main(String[] args) {
        Quadrilatero[] figuras = new Quadrilatero[5];
        Random random = new Random();

        // Criando inst√¢ncias aleat√≥rias de Retangulo, Circulo e Quadrado
        for (int i = 0; i < figuras.length; i++) {
            int tipo = random.nextInt(3); // 0 para Retangulo, 1 para Circulo, 2 para Quadrado
            switch (tipo) {
                case 0:
                    figuras[i] = new Retangulo(random.nextFloat() * 10, random.nextFloat() * 10);
                    break;
                case 1:
                    figuras[i] = new Circulo(random.nextFloat() * 10);
                    break;
                case 2:
                    figuras[i] = new Quadrado(random.nextFloat() * 10);
                    break;
            }
        }

        // Calculando e exibindo √°rea e per√≠metro de cada figura
        for (Quadrilatero figura : figuras) {
            System.out.println("√Årea: " + figura.calcularArea());
            System.out.println("Per√≠metro: " + figura.calcularPerimetro());
            System.out.println();
        }
    }
}

(‡¥¶‡µç‡¥¶‡¥øÀô·óúÀô)  ¬Ø\_(„ÉÑ)_/¬Ø üëç
