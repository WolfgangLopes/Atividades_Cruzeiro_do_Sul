CREATE  TABLE clientes(
    id number primary key,
    nome varchar2(50) not null 
);

DECLARE
v_id number;
v_nome varchar(50);
BEGIN
    v_id:=1;
    v_nome:='José';
    insert into clientes VALUES (v_id, v_nome);
end; 

select * from clientes

desc clientes

DECLARE
-- A função type herda o tipo de dados da variável que ela recebe, prevenindo erros humanos
-- É possível declarar o valor antes do BEGIN
v_id clientes.id%TYPE:=2;
v_nome clientes.nome%TYPE:='João';
BEGIN 
    insert into clientes VALUES (v_id, v_nome);
end; 


-- Exceções padrões
DECLARE
v_n1 number :=10;
v_n2 number :=0;
v_result number;
BEGIN
    v_result:=v_n1/v_n2;
    dbms_output.put_line('Resultado: ' || v_result);
    dbms_output.put_line('Calculo concluído com sucesso');

    EXCEPTION
    when ZERO_DIVIDE THEN
    dbms_output.put_line('Operação: '|| v_n1 || '/' ||v_n2);
    dbms_output.put_line('Mensagem: Não é possível dividir por zero');

    WHEN OTHERS THEN dbms_output.put_line('Erro inesperado ' || SQLERRM);
END;


--EXCEÇÔES PERSONALIZADA
DECLARE
    v_numero NUMBER :=5;
    excecao_numero_negativo EXCEPTION;
BEGIN
    if v_numero<0 then
    raise excecao_numero_negativo;
    end if;
    dbms_output.put_line('Número positivo: ' || v_numero);

EXCEPTION
    when excecao_numero_negativo THEN 
    dbms_output.put_line('Erro, o número não pode ser negativo; -- Número digitado: ' || v_numero);
    WHEN OTHERS THEN dbms_output.put_line('Erro inesperado ' || SQLERRM);
END;

--EXCEÇÔES PERSONALIZADAS COM MENSAGEM
DECLARE
    v_idade number :=15;
    erro_idade EXCEPTION;
    --PRAGMA cria uma exceção e associa ela com um código
    --O código das exceções pordem ir de -20000 até 20999
    PRAGMA EXCEPTION_INIT(erro_idade,-20001);
BEGIN
    if v_idade<18 then
    --                     (-number, 'error-text')
    RAISE_APPLICATION_ERROR(-20001, 'Idade mínima: 18 anos');
    end if;
EXCEPTION
    when erro_idade  THEN dbms_output.put_line('Erro' || SQLERRM);
END;

DECLARE
    v_a1 number:=3;
    v_a2 number:=2;
    v_af number:=4;
    v_maiornota number;
    v_soma_nota number;
    v_nota_final number;

    erro_nota EXCEPTION;
    PRAGMA EXCEPTION_INIT(erro_nota, -20002);

    erro_af EXCEPTION;
    PRAGMA EXCEPTION_INIT(erro_af, -20004);
BEGIN
    if v_a1<0 OR v_a1>5 OR v_a2<0 OR v_a2>5 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Notas A1 ou A! inválidas, notas devem ser maior que 0 e menor que 5. ' || 'A1:' || v_a1 || 'A2:' || v_a2);
        end if;
    if v_af<0 OR v_af>5 THEN 
    RAISE_APPLICATION_ERROR(-20004, 'Nota AF inválida! Nota deve ser maior que 0 e menor que 5.' || 'AF:' || v_af); 
    end if;
    if v_a2>v_a1 then v_maiornota:=v_a2; ELSE v_maiornota:=v_a1;
    v_soma_nota:=v_a1+v_a2;
    end if;

    if v_soma_nota>=6 THEN dbms_output.put_line('STATUS: Aprovado!');
                           dbms_output.put_line('Nota Final: ' || v_soma_nota);
    else 
        dbms_output.put_line('STATUS: Recuperação, de AF!');
        v_nota_final:=v_af+v_maiornota;
    end if;

        if v_nota_final>=6 THEN
        dbms_output.put_line('Aprovado na AF!');        
        ELSE dbms_output.put_line('Reprovado na AF');
        end if;
        dbms_output.put_line('Nota final: ' || v_nota_final);    
EXCEPTION
    when erro_nota THEN 
    dbms_output.put_line('Erro: Notas A1 ou A2 inválidas');
    dbms_output.put_line('Detalhes: ' || SQLERRM);

    when erro_af  THEN 
    dbms_output.put_line('Erro: Nota AF inválida');
    dbms_output.put_line('Detalhes: ' || SQLERRM);

    WHEN OTHERS THEN
    dbms_output.put_line('Erro: ' || SQLERRM);
END;
